#define DEBUG_TYPE "aquila-isel"
#include "Aquila.h"
#include "AquilaRegisterInfo.h"
#include "AquilaSubtarget.h"
#include "AquilaTargetMachine.h"
#include "MCTargetDesc/AquilaMCTargetDesc.h"
#include "llvm/GlobalValue.h"
#include "llvm/Instructions.h"
#include "llvm/Intrinsics.h"
#include "llvm/Support/CFG.h"
#include "llvm/Type.h"
#include "llvm/CodeGen/MachineConstantPool.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/CodeGen/SelectionDAGNodes.h"
#include "llvm/Target/TargetMachine.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// AquilaDAGToDAGISel - Aquila specific code to select Aquila machine
// instructions for SelectionDAG operations.
//===----------------------------------------------------------------------===//
namespace {

	class AquilaDAGToDAGISel : public SelectionDAGISel {

		/// TM - Keep a reference to AquilaTargetMachine.
		const AquilaTargetMachine &TM;

		/// Subtarget - Keep a pointer to the AquilaSubtarget around so that we can
		/// make the right decision when generating code for different targets.
		const AquilaSubtarget &Subtarget;

		public:
		explicit AquilaDAGToDAGISel(AquilaTargetMachine &tm) :
			SelectionDAGISel(tm),
			TM(tm),
			Subtarget(tm.getSubtarget<AquilaSubtarget>()) {}

		// Pass Name
		virtual const char *getPassName() const {
			return "Aquila DAG->DAG Pattern Instruction Selection";
		}

		private:
		// Include the pieces autogenerated from the target description.
#include "AquilaGenDAGISel.inc"

		/// getTargetMachine - Return a reference to the TargetMachine, casted
		/// to the target-specific type.
		const AquilaTargetMachine &getTargetMachine() {
			return static_cast<const AquilaTargetMachine &>(TM);
		}

		/// getInstrInfo - Return a reference to the TargetInstrInfo, casted
		/// to the target-specific type.
		const AquilaInstrInfo *getInstrInfo() {
			return getTargetMachine().getInstrInfo();
		}

		SDNode *Select(SDNode *N) /*override*/;

		// Complex Pattern.
		bool SelectAddr(SDValue N, SDValue &Base, SDValue &Offset);
	};
}

/// ComplexPattern used on AquilaInstrInfo
/// Used on Aquila Load/Store instructions
bool AquilaDAGToDAGISel::
SelectAddr(SDValue N, SDValue &Base, SDValue &Offset) {
	EVT ValTy = N.getValueType();

	if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(N)) {
		Base   = CurDAG->getTargetFrameIndex(FIN->getIndex(), ValTy);
		Offset = CurDAG->getTargetConstant(0, ValTy);
		return true;
	}

	llvm_unreachable("Unknown pattern");
	return true;
}

/// Select instructions not customized! Used for
/// expanded, promoted and normal instructions
SDNode* AquilaDAGToDAGISel::
Select(SDNode *Node) {
	// Select the default instruction
	SDNode *ResNode = SelectCode(Node);

	DEBUG(errs() << "=> ");
	if (ResNode == NULL || ResNode == Node)
		DEBUG(Node->dumpr(CurDAG));
	else
		DEBUG(ResNode->dumpr(CurDAG));
	DEBUG(errs() << "\n");
	return ResNode;
}

/// createAquilaISelDag - This pass converts a legalized DAG into a
/// Aquila-specific DAG, ready for instruction scheduling.
FunctionPass *llvm::createAquilaISelDag(AquilaTargetMachine &TM) {
	return new AquilaDAGToDAGISel(TM);
}
