diff -crN -x '*.pyc' llvm-3.6.2.src.org/CMakeLists.txt llvm-3.6.2.src/CMakeLists.txt
*** llvm-3.6.2.src.org/CMakeLists.txt	2016-02-16 13:03:53.000000000 -0500
--- llvm-3.6.2.src/CMakeLists.txt	2016-02-18 09:57:44.000000000 -0500
***************
*** 160,165 ****
--- 160,166 ----
    CppBackend
    Hexagon
    Mips
+   Aquila
    MSP430
    NVPTX
    PowerPC
diff -crN -x '*.pyc' llvm-3.6.2.src.org/cmake/config-ix.cmake llvm-3.6.2.src/cmake/config-ix.cmake
*** llvm-3.6.2.src.org/cmake/config-ix.cmake	2016-02-16 13:03:53.000000000 -0500
--- llvm-3.6.2.src/cmake/config-ix.cmake	2016-02-18 09:57:44.000000000 -0500
***************
*** 361,366 ****
--- 361,368 ----
    set(LLVM_NATIVE_ARCH ARM)
  elseif (LLVM_NATIVE_ARCH MATCHES "mips")
    set(LLVM_NATIVE_ARCH Mips)
+ elseif (LLVM_NATIVE_ARCH MATCHES "aquila")
+   set(LLVM_NATIVE_ARCH Aquila)
  elseif (LLVM_NATIVE_ARCH MATCHES "xcore")
    set(LLVM_NATIVE_ARCH XCore)
  elseif (LLVM_NATIVE_ARCH MATCHES "msp430")
diff -crN -x '*.pyc' llvm-3.6.2.src.org/include/llvm/ADT/Triple.h llvm-3.6.2.src/include/llvm/ADT/Triple.h
*** llvm-3.6.2.src.org/include/llvm/ADT/Triple.h	2016-02-16 13:03:53.000000000 -0500
--- llvm-3.6.2.src/include/llvm/ADT/Triple.h	2016-02-18 12:50:41.000000000 -0500
***************
*** 55,60 ****
--- 55,61 ----
      mipsel,     // MIPSEL: mipsel, mipsallegrexel
      mips64,     // MIPS64: mips64
      mips64el,   // MIPS64EL: mips64el
+     aquila,       // AQUILA: aquila
      msp430,     // MSP430: msp430
      ppc,        // PPC: powerpc
      ppc64,      // PPC64: powerpc64, ppu
diff -crN -x '*.pyc' llvm-3.6.2.src.org/include/llvm/MC/MCExpr.h llvm-3.6.2.src/include/llvm/MC/MCExpr.h
*** llvm-3.6.2.src.org/include/llvm/MC/MCExpr.h	2016-02-16 13:03:53.000000000 -0500
--- llvm-3.6.2.src/include/llvm/MC/MCExpr.h	2016-02-18 09:57:44.000000000 -0500
***************
*** 280,285 ****
--- 280,310 ----
      VK_Mips_PCREL_HI16,
      VK_Mips_PCREL_LO16,
  
+     VK_Aquila_GPREL,
+     VK_Aquila_GOT_CALL,
+     VK_Aquila_GOT16,
+     VK_Aquila_GOT,
+     VK_Aquila_ABS_HI,
+     VK_Aquila_ABS_LO,
+     VK_Aquila_TLSGD,
+     VK_Aquila_TLSLDM,
+     VK_Aquila_DTP_HI,
+     VK_Aquila_DTP_LO,
+     VK_Aquila_GOTTPREL,
+     VK_Aquila_TP_HI,
+     VK_Aquila_TP_LO,
+     VK_Aquila_GPOFF_HI,
+     VK_Aquila_GPOFF_LO,
+     VK_Aquila_GOT_DISP,
+     VK_Aquila_GOT_PAGE,
+     VK_Aquila_GOT_OFST,
+     VK_Aquila_HIGHER,
+     VK_Aquila_HIGHEST,
+     VK_Aquila_GOT_HI16,
+     VK_Aquila_GOT_LO16,
+     VK_Aquila_CALL_HI16,
+     VK_Aquila_CALL_LO16,
+ 
      VK_COFF_IMGREL32 // symbol@imgrel (image-relative)
    };
  
diff -crN -x '*.pyc' llvm-3.6.2.src.org/include/llvm/Object/ELFObjectFile.h llvm-3.6.2.src/include/llvm/Object/ELFObjectFile.h
*** llvm-3.6.2.src.org/include/llvm/Object/ELFObjectFile.h	2016-02-16 13:03:53.000000000 -0500
--- llvm-3.6.2.src/include/llvm/Object/ELFObjectFile.h	2016-02-18 12:51:06.000000000 -0500
***************
*** 843,848 ****
--- 843,850 ----
        return "ELF32-hexagon";
      case ELF::EM_MIPS:
        return "ELF32-mips";
+     case ELF::EM_AQUILA:
+       return "ELF32-aquila";
      case ELF::EM_PPC:
        return "ELF32-ppc";
      case ELF::EM_SPARC:
***************
*** 899,904 ****
--- 901,913 ----
      default:
        report_fatal_error("Invalid ELFCLASS!");
      }
+   case ELF::EM_AQUILA:
+     switch (EF.getHeader()->e_ident[ELF::EI_CLASS]) {
+     case ELF::ELFCLASS32:
+       return Triple::aquila;
+     default:
+       report_fatal_error("Invalid ELFCLASS!");
+     }
    case ELF::EM_PPC:
      return Triple::ppc;
    case ELF::EM_PPC64:
diff -crN -x '*.pyc' llvm-3.6.2.src.org/include/llvm/Support/ELF.h llvm-3.6.2.src/include/llvm/Support/ELF.h
*** llvm-3.6.2.src.org/include/llvm/Support/ELF.h	2016-02-16 13:03:53.000000000 -0500
--- llvm-3.6.2.src/include/llvm/Support/ELF.h	2016-02-18 09:57:44.000000000 -0500
***************
*** 308,314 ****
    EM_COGE          = 216, // Cognitive Smart Memory Processor
    EM_COOL          = 217, // iCelero CoolEngine
    EM_NORC          = 218, // Nanoradio Optimized RISC
!   EM_CSR_KALIMBA   = 219  // CSR Kalimba architecture family
  };
  
  // Object file classes.
--- 308,316 ----
    EM_COGE          = 216, // Cognitive Smart Memory Processor
    EM_COOL          = 217, // iCelero CoolEngine
    EM_NORC          = 218, // Nanoradio Optimized RISC
!   EM_CSR_KALIMBA   = 219, // CSR Kalimba architecture family
! 
!   EM_AQUILA          = 999 // Document LLVM Backend Tutorial Aquila
  };
  
  // Object file classes.
***************
*** 466,471 ****
--- 468,478 ----
  #include "ELFRelocs/Mips.def"
  };
  
+ // ELF Relocation types for Mips
+ enum {
+ #include "ELFRelocs/Aquila.def"
+ };
+ 
  // Special values for the st_other field in the symbol table entry for MIPS.
  enum {
    STO_MIPS_OPTIONAL        = 0x04,  // Symbol whose definition is optional
***************
*** 475,480 ****
--- 482,495 ----
    STO_MIPS_MIPS16          = 0xf0   // MIPS Specific ISA for Mips16
  };
  
+ // Aquila Specific e_flags
+ enum {
+   EF_AQUILA_NOREORDER         = 0x00000001, // Don’t reorder instructions
+   EF_AQUILA_PIC               = 0x00000002, // Position independent code
+   EF_AQUILA_ARCH_32           = 0x50000000, // AQUILA32 instruction set per linux not elf.h
+   EF_AQUILA_ARCH              = 0xf0000000 // Mask for applying EF_AQUILA_ARCH_ variant
+ };
+ 
  // Hexagon Specific e_flags
  // Release 5 ABI
  enum {
diff -crN -x '*.pyc' llvm-3.6.2.src.org/include/llvm/Support/ELFRelocs/Aquila.def llvm-3.6.2.src/include/llvm/Support/ELFRelocs/Aquila.def
*** llvm-3.6.2.src.org/include/llvm/Support/ELFRelocs/Aquila.def	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/include/llvm/Support/ELFRelocs/Aquila.def	2016-02-18 09:57:44.000000000 -0500
***************
*** 0 ****
--- 1,28 ----
+ #ifndef ELF_RELOC
+ #error "ELF_RELOC must be defined"
+ #endif
+ 
+ ELF_RELOC(R_AQUILA_NONE,                0)
+ ELF_RELOC(R_AQUILA_32,                  2)
+ ELF_RELOC(R_AQUILA_HI16,                5)
+ ELF_RELOC(R_AQUILA_LO16,                6)
+ ELF_RELOC(R_AQUILA_GPREL16,             7)
+ ELF_RELOC(R_AQUILA_LITERAL,             8)
+ ELF_RELOC(R_AQUILA_GOT16,               9)
+ ELF_RELOC(R_AQUILA_PC16,               10)
+ ELF_RELOC(R_AQUILA_CALL16,             11)
+ ELF_RELOC(R_AQUILA_GPREL32,            12)
+ ELF_RELOC(R_AQUILA_PC24,               13)
+ ELF_RELOC(R_AQUILA_GOT_HI16,           22)
+ ELF_RELOC(R_AQUILA_GOT_LO16,           23)
+ ELF_RELOC(R_AQUILA_RELGOT,             36)
+ ELF_RELOC(R_AQUILA_TLS_GD,             42)
+ ELF_RELOC(R_AQUILA_TLS_LDM,            43)
+ ELF_RELOC(R_AQUILA_TLS_DTP_HI16,       44)
+ ELF_RELOC(R_AQUILA_TLS_DTP_LO16,       45)
+ ELF_RELOC(R_AQUILA_TLS_GOTTPREL,       46)
+ ELF_RELOC(R_AQUILA_TLS_TPREL32,        47)
+ ELF_RELOC(R_AQUILA_TLS_TP_HI16,        49)
+ ELF_RELOC(R_AQUILA_TLS_TP_LO16,        50)
+ ELF_RELOC(R_AQUILA_GLOB_DAT,           51)
+ ELF_RELOC(R_AQUILA_JUMP_SLOT,          127)
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/MC/MCELFStreamer.cpp llvm-3.6.2.src/lib/MC/MCELFStreamer.cpp
*** llvm-3.6.2.src.org/lib/MC/MCELFStreamer.cpp	2016-02-16 13:03:54.000000000 -0500
--- llvm-3.6.2.src/lib/MC/MCELFStreamer.cpp	2016-02-18 09:57:44.000000000 -0500
***************
*** 358,363 ****
--- 358,367 ----
      case MCSymbolRefExpr::VK_Mips_GOTTPREL:
      case MCSymbolRefExpr::VK_Mips_TPREL_HI:
      case MCSymbolRefExpr::VK_Mips_TPREL_LO:
+     case MCSymbolRefExpr::VK_Aquila_TLSGD:
+     case MCSymbolRefExpr::VK_Aquila_GOTTPREL:
+     case MCSymbolRefExpr::VK_Aquila_TP_HI:
+     case MCSymbolRefExpr::VK_Aquila_TP_LO:
      case MCSymbolRefExpr::VK_PPC_DTPMOD:
      case MCSymbolRefExpr::VK_PPC_TPREL:
      case MCSymbolRefExpr::VK_PPC_TPREL_LO:
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/MC/MCExpr.cpp llvm-3.6.2.src/lib/MC/MCExpr.cpp
*** llvm-3.6.2.src.org/lib/MC/MCExpr.cpp	2016-02-16 13:03:54.000000000 -0500
--- llvm-3.6.2.src/lib/MC/MCExpr.cpp	2016-02-18 09:57:44.000000000 -0500
***************
*** 281,286 ****
--- 281,311 ----
    case VK_Mips_PCREL_HI16: return "PCREL_HI16";
    case VK_Mips_PCREL_LO16: return "PCREL_LO16";
    case VK_COFF_IMGREL32: return "IMGREL";
+ 
+   case VK_Aquila_GPREL: return "GPREL";
+   case VK_Aquila_GOT_CALL: return "GOT_CALL";
+   case VK_Aquila_GOT16: return "GOT16";
+   case VK_Aquila_GOT: return "GOT";
+   case VK_Aquila_ABS_HI: return "ABS_HI";
+   case VK_Aquila_ABS_LO: return "ABS_LO";
+   case VK_Aquila_TLSGD: return "TLSGD";
+   case VK_Aquila_TLSLDM: return "TLSLDM";
+   case VK_Aquila_DTP_HI: return "DTP_HI";
+   case VK_Aquila_DTP_LO: return "DTP_LO";
+   case VK_Aquila_GOTTPREL: return "GOTTPREL";
+   case VK_Aquila_TP_HI: return "TP_HI";
+   case VK_Aquila_TP_LO: return "TP_LO";
+   case VK_Aquila_GPOFF_HI: return "GPOFF_HI";
+   case VK_Aquila_GPOFF_LO: return "GPOFF_LO";
+   case VK_Aquila_GOT_DISP: return "GOT_DISP";
+   case VK_Aquila_GOT_PAGE: return "GOT_PAGE";
+   case VK_Aquila_GOT_OFST: return "GOT_OFST";
+   case VK_Aquila_HIGHER: return "HIGHER";
+   case VK_Aquila_HIGHEST: return "HIGHEST";
+   case VK_Aquila_GOT_HI16: return "GOT_HI16";
+   case VK_Aquila_GOT_LO16: return "GOT_LO16";
+   case VK_Aquila_CALL_HI16: return "CALL_HI16";
+   case VK_Aquila_CALL_LO16: return "CALL_LO16";
    }
    llvm_unreachable("Invalid variant kind");
  }
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Object/ELF.cpp llvm-3.6.2.src/lib/Object/ELF.cpp
*** llvm-3.6.2.src.org/lib/Object/ELF.cpp	2016-02-16 13:03:54.000000000 -0500
--- llvm-3.6.2.src/lib/Object/ELF.cpp	2016-02-18 09:57:44.000000000 -0500
***************
*** 39,44 ****
--- 39,51 ----
        break;
      }
      break;
+   case ELF::EM_AQUILA:
+     switch (Type) {
+ #include "llvm/Support/ELFRelocs/Aquila.def"
+     default:
+       break;
+     }
+     break;
    case ELF::EM_AARCH64:
      switch (Type) {
  #include "llvm/Support/ELFRelocs/AArch64.def"
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Support/Triple.cpp llvm-3.6.2.src/lib/Support/Triple.cpp
*** llvm-3.6.2.src.org/lib/Support/Triple.cpp	2016-02-16 13:03:54.000000000 -0500
--- llvm-3.6.2.src/lib/Support/Triple.cpp	2016-02-18 12:51:41.000000000 -0500
***************
*** 28,33 ****
--- 28,34 ----
    case mipsel:      return "mipsel";
    case mips64:      return "mips64";
    case mips64el:    return "mips64el";
+   case aquila:      return "aquila";
    case msp430:      return "msp430";
    case ppc64:       return "powerpc64";
    case ppc64le:     return "powerpc64le";
***************
*** 81,86 ****
--- 82,89 ----
    case mips64:
    case mips64el:    return "mips";
  
+   case aquila:      return "aquila";
+ 
    case hexagon:     return "hexagon";
  
    case amdgcn:
***************
*** 195,200 ****
--- 198,204 ----
      .Case("mipsel", mipsel)
      .Case("mips64", mips64)
      .Case("mips64el", mips64el)
+     .Case("aquila", aquila)
      .Case("msp430", msp430)
      .Case("ppc64", ppc64)
      .Case("ppc32", ppc)
***************
*** 299,304 ****
--- 303,309 ----
      .Cases("mipsel", "mipsallegrexel", Triple::mipsel)
      .Cases("mips64", "mips64eb", Triple::mips64)
      .Case("mips64el", Triple::mips64el)
+     .Cases("aquila", "aquilaeb", "aquilaallegrex", Triple::aquila)
      .Case("r600", Triple::r600)
      .Case("amdgcn", Triple::amdgcn)
      .Case("hexagon", Triple::hexagon)
***************
*** 865,870 ****
--- 870,876 ----
    case llvm::Triple::le32:
    case llvm::Triple::mips:
    case llvm::Triple::mipsel:
+   case llvm::Triple::aquila:
    case llvm::Triple::nvptx:
    case llvm::Triple::ppc:
    case llvm::Triple::r600:
***************
*** 935,940 ****
--- 941,947 ----
    case Triple::le32:
    case Triple::mips:
    case Triple::mipsel:
+   case Triple::aquila:
    case Triple::nvptx:
    case Triple::ppc:
    case Triple::r600:
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/:w llvm-3.6.2.src/lib/Target/Aquila/:w
*** llvm-3.6.2.src.org/lib/Target/Aquila/:w	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/:w	2016-02-18 16:52:41.000000000 -0500
***************
*** 0 ****
--- 1,67 ----
+ //===- AquilaInstrInfo.td - Target Description for Aquila Target -*- tablegen -*-=//
+ //
+ //                     The LLVM Compiler Infrastructure
+ //
+ // This file is distributed under the University of Illinois Open Source
+ // License. See LICENSE.TXT for details.
+ //
+ 
+ //===----------------------------------------------------------------------===//
+ // Instruction format superclass
+ //===----------------------------------------------------------------------===//
+ 
+ include "AquilaInstrFormats.td"
+ 
+ class AquilaInstAlias<string Asm, dag Result, bit Emit = 0b1> :
+   InstAlias<Asm, Result, Emit>;
+ 
+ //===----------------------------------------------------------------------===//
+ // Operand, Complex Patterns and Transformations Definitions
+ //===----------------------------------------------------------------------===//
+ def simm16 : Operand<i32> {
+   let DecoderMethod = "DecodeSimm16";
+ }
+ 
+ def immSExt16 : PatLeaf<(imm), [{ return isInt<16>(N->getSExtValue()); }]>;
+ 
+ //===----------------------------------------------------------------------===//
+ // Instructions
+ //===----------------------------------------------------------------------===//
+ 
+ class ArithLogicR<bits<5> op, string asmstr, SDNode OpNode, InstrItinClass itin, RegisterClass RC>
+     : AquilaInstFormX<op, (outs RC:$rd), (ins RC:$rs, RC:$rt),
+ 	                  !strconcat(asmstr, "\t$rd, $rs, $rt"),
+ 					  [(set RC:$rd, (OpNode RC:$rs, RC:$rt))], itin> {
+ }
+ 
+ class ArithLogicI<bits<5> op, string asmstr, InstrItinClass itin, RegisterClass RC>
+     : AquilaInstFormI<op, (outs RC:$rd), (ins RC:$rs, simm16:$imm16),
+ 	                  !strconcat(asmstr, "\t$rd, $rs, $imm16"),
+ 					  [(set RC:$rd, RC:$rs, immSExt16:$imm16)], itin> {
+ }
+ 
+ def ADD : ArithLogicR<0x00, "add", add, IIAlu, CPURegs>;
+ def SUB : ArithLogicR<0x01, "sub", sub, IIAlu, CPURegs>;
+ 
+ def ADDi : ArithLogicI<0x00, "addi", IIAlu, CPURegs>;
+ 
+ //class Load<bits<5> op, string asmstr>
+ //    : AquilaInstFormI<op, (outs CPURegs:$rd), (ins CPURegs:$rs, movetarget:$imm16),
+ //	                  !strconcat(asmstr, "\t$rd, $imm16($rs)"), [(set CPURegs:$rd, immSExt16:$imm16, CPURegs:$rs)], IILoad> {
+ //  let DecoderMethod = "DecodeMoveTarget";
+ //}
+ //
+ //def LD : Load<0xc0, "ld">;
+ 
+ //===----------------------------------------------------------------------===//
+ // Instruction aliases
+ //===----------------------------------------------------------------------===//
+ //class LoadImm<string instr_asm, Operand Od, RegisterClass RC> :
+ //  AquilaAsmPseudoInst<(outs RC:$rt), (ins Od:$imm16),
+ //                      !strconcat(instr_asm, "\t$rt, $imm16")>;
+ //def LoadImmReg : LoadImm<"li", uimm5, CPURegs>;
+ 
+ def : AquilaInstAlias<"li $rd, $imm16", (ADDi CPURegs:$rd, $imm16"), 1> {
+ }
+ def : AquilaInstAlias<"mr $rd, $rs", (ADD CPURegs:$rd, CPURegs:$rs, R0), 1> {
+ }
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/Aquila.h llvm-3.6.2.src/lib/Target/Aquila/Aquila.h
*** llvm-3.6.2.src.org/lib/Target/Aquila/Aquila.h	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/Aquila.h	2016-02-18 09:57:44.000000000 -0500
***************
*** 0 ****
--- 1,28 ----
+ //===-- Aquila.h - Top-level interface for Aquila representation ----*- C++ -*-===//
+ //
+ //                     The LLVM Compiler Infrastructure
+ //
+ // This file is distributed under the University of Illinois Open Source
+ // License. See LICENSE.TXT for details.
+ //
+ //===----------------------------------------------------------------------===//
+ //
+ // This file contains the entry points for global functions defined in
+ // the LLVM Aquila back-end.
+ //
+ //===----------------------------------------------------------------------===//
+ 
+ #ifndef LLVM_LIB_TARGET_AQUILA_AQUILA_H
+ #define LLVM_LIB_TARGET_AQUILA_AQUILA_H
+ 
+ #include "MCTargetDesc/AquilaMCTargetDesc.h"
+ #include "llvm/Target/TargetMachine.h"
+ 
+ namespace llvm {
+   class AquilaTargetMachine;
+   class FunctionPass;
+ 
+ } // end namespace llvm;
+ 
+ #endif
+ 
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/Aquila.td llvm-3.6.2.src/lib/Target/Aquila/Aquila.td
*** llvm-3.6.2.src.org/lib/Target/Aquila/Aquila.td	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/Aquila.td	2016-02-18 13:35:48.000000000 -0500
***************
*** 0 ****
--- 1,30 ----
+ //===-- Aquila.td - Describe the Aquila Target Machine ---------*- tablegen -*-===//
+ //
+ //                     The LLVM Compiler Infrastructure
+ //
+ // This file is distributed under the University of Illinois Open Source
+ // License. See LICENSE.TXT for details.
+ //
+ //===----------------------------------------------------------------------===//
+ 
+ //===----------------------------------------------------------------------===//
+ // Calling Conv, Instruction Descriptions
+ //===----------------------------------------------------------------------===//
+ 
+ include "AquilaSchedule.td"
+ include "AquilaInstrInfo.td"
+ include "AquilaCallingConv.td"
+ 
+ def AquilaInstrInfo : InstrInfo;
+ 
+ def : Processor<"aquila", AquilaGenericItineraries, []>;
+ 
+ def AquilaAsmWriter : AsmWriter {
+   string AsmWriterClassName = "InstPrinter";
+   bit isMCAsmWriter = 1;
+ }
+ 
+ def Aquila : Target {
+   let InstructionSet = AquilaInstrInfo;
+   let AssemblyWriters = [AquilaAsmWriter];
+ }
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/AquilaCallingConv.td llvm-3.6.2.src/lib/Target/Aquila/AquilaCallingConv.td
*** llvm-3.6.2.src.org/lib/Target/Aquila/AquilaCallingConv.td	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/AquilaCallingConv.td	2016-02-18 14:47:23.000000000 -0500
***************
*** 0 ****
--- 1,30 ----
+ //===-- AquilaCallingConv.td - Calling Conventions for Aquila --*- tablegen -*-===//
+ //
+ //                     The LLVM Compiler Infrastructure
+ //
+ // This file is distributed under the University of Illinois Open Source
+ // License. See LICENSE.TXT for details.
+ //
+ //===----------------------------------------------------------------------===//
+ // This describes the calling conventions for Aquila architecture.
+ //===----------------------------------------------------------------------===//
+ 
+ // Aquila Calling Convention
+ def CC_Aquila : CallingConv<[
+   // Promote i8/i16 arguments to i32
+   CCIfType<[i1, i8, i16], CCPromoteToType<i32>>,
+ 
+   // Integer values get stored in argument registers
+   CCIfType<[i32], CCAssignToReg<[R8, R9, R10, R11, R12, R13]>>,
+ 
+   // Integer values remaining get stored in stack slots that are 4-bytes in
+   // size and 4-bytes aligned
+   CCIfType<[i32], CCAssignToStack<4, 4>>
+ ]>;
+ 
+ def RetCC_Aquila : CallingConv<[
+   // i32 are returned in R3
+   CCIfType<[i32], CCAssignToReg<[R3]>>
+ ]>;
+ 
+ def CSR_SingleFloatOnly : CalleeSavedRegs<(add (sequence "R%u", 31, 23), R4)>;
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/AquilaInstrFormats.td llvm-3.6.2.src/lib/Target/Aquila/AquilaInstrFormats.td
*** llvm-3.6.2.src.org/lib/Target/Aquila/AquilaInstrFormats.td	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/AquilaInstrFormats.td	2016-02-18 16:39:13.000000000 -0500
***************
*** 0 ****
--- 1,108 ----
+ //===-- AquilaInstrFormats.td - Aquila Instruction Formats -----*- tablegen -*-===//
+ //
+ //                     The LLVM Compiler Infrastructure
+ //
+ // This file is distributed under the University of Illinois Open Source
+ // License. See LICENSE.TXT for details.
+ //
+ //===----------------------------------------------------------------------===//
+ 
+ class Format<bits<3> val> {
+   bits<3> Value = val;
+ }
+ 
+ def Pseudo : Format<0>;
+ def FormX  : Format<1>;
+ def FormB  : Format<2>;
+ def FormR  : Format<3>;
+ def FormI  : Format<4>;
+ 
+ // Common Format
+ class AquilaInst<dag outs, dag ins, string asmstr, list<dag> pattern, InstrItinClass itin, Format f>
+     : Instruction {
+   field bits<32> Inst;
+   Format Form = f;
+ 
+   bits<5> Opcode = 0;
+ 
+   let Namespace      = "Aquila";
+   let Size           = 4;
+   let Inst{30-26}    = Opcode;
+   let OutOperandList = outs;
+   let InOperandList  = ins;
+   let AsmString      = asmstr;
+   let Pattern        = pattern;
+   let Itinerary      = itin;
+ 
+   bits<3> FormBits = Form.Value;
+ 
+   let DecoderNamespace = "Aquila";
+ 
+   field bits<32> SoftFail = 0;
+ }
+ 
+ class AquilaPseudo<dag outs, dag ins, list<dag> pattern,
+                    InstrItinClass itin = IIPseudo>
+     : AquilaInst<outs, ins, "", pattern, itin, Pseudo> {
+   let isCodeGenOnly = 1;
+   let isPseudo      = 1;
+ }
+ 
+ class AquilaInstFormX<bits<5> op, dag outs, dag ins, string asmstr, list<dag> pattern, InstrItinClass itin>
+     : AquilaInst<outs, ins, asmstr, pattern, itin, FormX> {
+   bits<5>  rd;
+   bits<5>  rs;
+   bits<5>  rt;
+   bits<10> funct;
+ 
+   let Opcode = op;
+   
+   let Inst{31}    = 0;
+   let Inst{25-21} = rd;
+   let Inst{20-16} = rs;
+   let Inst{15-11} = rt;
+   let Inst{10-1}  = funct;
+   let Inst{0}     = 0;
+ }
+ 
+ class AquilaInstFormB<bits<5> op, dag outs, dag ins, string asmstr, list<dag> pattern, InstrItinClass itin>
+     : AquilaInst<outs, ins, asmstr, pattern, itin, FormB> {
+   bits<5>  rd;
+   bits<5>  rs;
+   bits<16> imm16;
+ 
+   let Opcode = op;
+   
+   let Inst{25-21} = rd;
+   let Inst{20-16} = rs;
+   let Inst{15-0}  = imm16;
+ }
+ 
+ class AquilaInstFormR<bits<5> op, dag outs, dag ins, string asmstr, list<dag> pattern, InstrItinClass itin>
+     : AquilaInst<outs, ins, asmstr, pattern, itin, FormR> {
+   bits<5>  rd;
+   bits<5>  rs;
+   bits<5>  rt;
+ 
+   let Opcode = op;
+   
+   let Inst{31}    = 0;
+   let Inst{25-21} = rd;
+   let Inst{20-16} = rs;
+   let Inst{15-11} = rt;
+   let Inst{10-0}  = 1;
+ }
+ 
+ class AquilaInstFormI<bits<5> op, dag outs, dag ins, string asmstr, list<dag> pattern, InstrItinClass itin>
+     : AquilaInst<outs, ins, asmstr, pattern, itin, FormI> {
+   bits<5>  rd;
+   bits<5>  rs;
+   bits<16> imm16;
+ 
+   let Opcode = op;
+   
+   let Inst{31}    = 0;
+   let Inst{25-21} = rd;
+   let Inst{20-16} = rs;
+   let Inst{15-0}  = imm16;
+ }
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/AquilaInstrInfo.td llvm-3.6.2.src/lib/Target/Aquila/AquilaInstrInfo.td
*** llvm-3.6.2.src.org/lib/Target/Aquila/AquilaInstrInfo.td	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/AquilaInstrInfo.td	2016-02-18 17:48:27.000000000 -0500
***************
*** 0 ****
--- 1,123 ----
+ //===- AquilaInstrInfo.td - Target Description for Aquila Target -*- tablegen -*-=//
+ //
+ //                     The LLVM Compiler Infrastructure
+ //
+ // This file is distributed under the University of Illinois Open Source
+ // License. See LICENSE.TXT for details.
+ //
+ 
+ //===----------------------------------------------------------------------===//
+ // Instruction format superclass
+ //===----------------------------------------------------------------------===//
+ 
+ include "AquilaInstrFormats.td"
+ 
+ //===----------------------------------------------------------------------===//
+ // Profiles and Nodes
+ //===----------------------------------------------------------------------===//
+ 
+ def SDT_AquilaJmpLink : SDTypeProfile<0, 1, [SDTCisVT<0, iPTR>]>;
+ 
+ // Call
+ def AquilaJmpLink : SDNode<"AquilaISD::JmpLink", SDT_AquilaJmpLink,
+                            [SDNPHasChain, SDNPOutGlue, SDNPOptInGlue,
+ 						    SDNPVariadic]>;
+ 
+ //===----------------------------------------------------------------------===//
+ // Operand, Complex Patterns and Transformations Definitions
+ //===----------------------------------------------------------------------===//
+ def simm16 : Operand<i32> {
+   let DecoderMethod = "DecodeSimm16";
+ }
+ 
+ def immSExt16 : PatLeaf<(imm), [{ return isInt<16>(N->getSExtValue()); }]>;
+ 
+ def mem : Operand<i32> {
+   let PrintMethod = "printMemOperand";
+   let MIOperandInfo = (ops CPURegs, simm16);
+   let EncoderMethod = "getMemEncoding";
+ }
+ 
+ def addr : ComplexPattern<iPTR, 2, "selectIntAddr", [frameindex]>;
+ 
+ def calltarget : Operand<iPTR> {
+   let EncoderMethod = "getJumpTargetOpValue";
+ }
+ 
+ //===----------------------------------------------------------------------===//
+ // Instructions
+ //===----------------------------------------------------------------------===//
+ 
+ class ArithLogicR<bits<5> op, string asmstr, SDNode OpNode, InstrItinClass itin, RegisterClass RC>
+     : AquilaInstFormX<op, (outs RC:$rd), (ins RC:$rs, RC:$rt),
+ 	                  !strconcat(asmstr, "\t$rd, $rs, $rt"),
+ 					  [(set RC:$rd, (OpNode RC:$rs, RC:$rt))], itin> {
+ }
+ 
+ class ArithLogicI<bits<5> op, string asmstr, SDNode OpNode, InstrItinClass itin, RegisterClass RC>
+     : AquilaInstFormI<op, (outs RC:$rd), (ins RC:$rs, simm16:$imm16),
+ 	                  !strconcat(asmstr, "\t$rd, $rs, $imm16"),
+ 					  [(set RC:$rd, (OpNode RC:$rs, immSExt16:$imm16))], itin> {
+ }
+ 
+ class JumpLink<bits<5> op, string asmstr>
+     : AquilaInstFormI<op, (outs), (ins calltarget:$imm16, variable_ops),
+ 	                  !strconcat(asmstr, "\t$imm16"), [(AquilaJmpLink imm:$imm16)],
+ 					  IIBranch> {
+   let isCall = 1;
+   let DecoderMethod = "DecodeJumpTarget";
+ }
+ 
+ class JumpRegister<bits<5> op, string asmstr, RegisterClass RC>
+     : AquilaInstFormR<op, (outs), (ins RC:$rd),
+ 	                  !strconcat(asmstr, "\t$rd"), [(null_frag RC:$rd)], IIBranch> {
+   let isBranch = 1;
+   let isTerminator = 1;
+   let isBarrier = 1;
+   let isIndirectBranch = 1;
+ }
+ 
+ class Load<bits<5> op, string asmstr, SDPatternOperator OpNode = null_frag, InstrItinClass itin, RegisterClass RC>
+     : AquilaInstFormI<op, (outs RC:$rd), (ins mem:$addr),
+ 	                  !strconcat(asmstr, "\t$rd, $addr"),
+ 					  [(set RC:$rd, (OpNode RC:$rs, addr:$imm16))], itin> {
+   let DecoderMethod = "DecodeMem";
+ }
+ 
+ class Store<bits<5> op, string asmstr, SDPatternOperator OpNode = null_frag, InstrItinClass itin, RegisterClass RC>
+     : AquilaInstFormI<op, (outs), (ins RC:$rd, mem:$imm16),
+ 	                  !strconcat(asmstr, "\t$rd, $addr"),
+ 					  [(OpNode RC:$rd, addr:$imm16)], itin> {
+   let DecoderMethod = "DecodeMem";
+ }
+ 
+ def ADD : ArithLogicR<0x00, "add", add, IIAlu, CPURegs>;
+ def SUB : ArithLogicR<0x01, "sub", sub, IIAlu, CPURegs>;
+ 
+ def ADDi : ArithLogicI<0x00, "addi", add, IIAlu, CPURegs>;
+ 
+ def JAL : JumpLink<0x06, "jal">;
+ def JR : JumpRegister<0x02, "jr", CPURegs>;
+ 
+ def LD : Load<0x0c, "ld", null_frag, IILoad, CPURegs>;
+ def ST : Store<0x0d, "st", null_frag, IIStore, CPURegs>;
+ 
+ //===----------------------------------------------------------------------===//
+ // Instruction aliases
+ //===----------------------------------------------------------------------===//
+ 
+ class AquilaInstAlias<string Asm, dag Result, bit Emit = 0b1> :
+   InstAlias<Asm, Result, Emit>;
+ 
+ def : AquilaInstAlias<"li $rd, $imm16", (ADDi CPURegs:$rd, $imm16), 1> {}
+ def : AquilaInstAlias<"mr $rd, $rs", (ADD CPURegs:$rd, CPURegs:$rs, R0), 1> {}
+ 
+ //===----------------------------------------------------------------------===//
+ // Arbitrary patterns that map to one or more instructions
+ //===----------------------------------------------------------------------===//
+ 
+ def : Pat<(AquilaJmpLink (i32 tglobaladdr:$dst)),
+           (JAL tglobaladdr:$dst)>;
+ def : Pat<(AquilaJmpLink (i32 texternalsym:$dst)),
+           (JAL texternalsym:$dst)>;
+ 
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/AquilaOther.td llvm-3.6.2.src/lib/Target/Aquila/AquilaOther.td
*** llvm-3.6.2.src.org/lib/Target/Aquila/AquilaOther.td	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/AquilaOther.td	2016-02-18 14:40:18.000000000 -0500
***************
*** 0 ****
--- 1,24 ----
+ //===-- AquilaOther.td - Describe the Aquila Target Machine ----*- tablegen -*-===//
+ //
+ //                     The LLVM Compiler Infrastructure
+ //
+ // This file is distributed under the University of Illinois Open Source
+ // License. See LICENSE.TXT for details.
+ //
+ //===----------------------------------------------------------------------===//
+ // This is the top level entry point for the Aquila target.
+ //===----------------------------------------------------------------------===//
+ 
+ //===----------------------------------------------------------------------===//
+ // Target-independent interfaces
+ //===----------------------------------------------------------------------===//
+ 
+ include "llvm/Target/Target.td"
+ 
+ //===----------------------------------------------------------------------===//
+ // Target-dependent interfaces
+ //===----------------------------------------------------------------------===//
+ 
+ include "AquilaRegisterInfo.td"
+ include "Aquila.td"
+ 
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/AquilaRegisterInfo.td llvm-3.6.2.src/lib/Target/Aquila/AquilaRegisterInfo.td
*** llvm-3.6.2.src.org/lib/Target/Aquila/AquilaRegisterInfo.td	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/AquilaRegisterInfo.td	2016-02-18 14:39:06.000000000 -0500
***************
*** 0 ****
--- 1,89 ----
+ //===-- AquilaRegisterInfo.td - Aquila Register defs -----------*- tablegen -*-===//
+ //
+ //                     The LLVM Compiler Infrastructure
+ //
+ // This file is distributed under the University of Illinois Open Source
+ // License. See LICENSE.TXT for details.
+ //
+ //===----------------------------------------------------------------------===//
+ 
+ //===----------------------------------------------------------------------===//
+ //  Declarations that describe the AQUILA register file
+ //===----------------------------------------------------------------------===//
+ 
+ // We have banks of 16 registers each.
+ class AquilaReg<bits<16> Enc, string n> : Register<n> {
+   let HWEncoding = Enc;
+   let Namespace = "Aquila";
+ }
+ 
+ // Aquila CPU Registers
+ class AquilaGPRReg<bits<16> Enc, string n> : AquilaReg<Enc, n>;
+ 
+ //===----------------------------------------------------------------------===//
+ //@Registers
+ //===----------------------------------------------------------------------===//
+ // The register string, such as "9" or "gp" will show on "llvm-objdump -d"
+ //@ All registers definition
+ let Namespace = "Aquila" in {
+   //@ General Purpose Registers
+   def R0   : AquilaGPRReg<0,  "r0">,   DwarfRegNum<[0]>;
+   def R1   : AquilaGPRReg<1,  "r1">,   DwarfRegNum<[1]>;
+   def R2   : AquilaGPRReg<2,  "r2">,   DwarfRegNum<[2]>;
+   def R3   : AquilaGPRReg<3,  "r3">,   DwarfRegNum<[3]>;
+   def R4   : AquilaGPRReg<4,  "r4">,   DwarfRegNum<[4]>;
+   def R5   : AquilaGPRReg<5,  "r5">,   DwarfRegNum<[5]>;
+   def R6   : AquilaGPRReg<6,  "r6">,   DwarfRegNum<[6]>;
+   def R7   : AquilaGPRReg<7,  "r7">,   DwarfRegNum<[7]>;
+   def R8   : AquilaGPRReg<8,  "r8">,   DwarfRegNum<[8]>;
+   def R9   : AquilaGPRReg<9,  "r9">,   DwarfRegNum<[9]>;
+   def R10  : AquilaGPRReg<10, "r10">,  DwarfRegNum<[10]>;
+   def R11  : AquilaGPRReg<11, "r11">,  DwarfRegNum<[11]>;
+   def R12  : AquilaGPRReg<12, "r12">,  DwarfRegNum<[12]>;
+   def R13  : AquilaGPRReg<13, "r13">,  DwarfRegNum<[13]>;
+   def R14  : AquilaGPRReg<14, "r14">,  DwarfRegNum<[14]>;
+   def R15  : AquilaGPRReg<15, "r15">,  DwarfRegNum<[15]>;
+   def R16  : AquilaGPRReg<16, "r16">,  DwarfRegNum<[16]>;
+   def R17  : AquilaGPRReg<17, "r17">,  DwarfRegNum<[17]>;
+   def R18  : AquilaGPRReg<18, "r18">,  DwarfRegNum<[18]>;
+   def R19  : AquilaGPRReg<19, "r19">,  DwarfRegNum<[19]>;
+   def R20  : AquilaGPRReg<20, "r20">,  DwarfRegNum<[20]>;
+   def R21  : AquilaGPRReg<21, "r21">,  DwarfRegNum<[21]>;
+   def R22  : AquilaGPRReg<22, "r22">,  DwarfRegNum<[22]>;
+   def R23  : AquilaGPRReg<23, "r23">,  DwarfRegNum<[23]>;
+   def R24  : AquilaGPRReg<24, "r24">,  DwarfRegNum<[24]>;
+   def R25  : AquilaGPRReg<25, "r25">,  DwarfRegNum<[25]>;
+   def R26  : AquilaGPRReg<26, "r26">,  DwarfRegNum<[26]>;
+   def R27  : AquilaGPRReg<27, "r27">,  DwarfRegNum<[27]>;
+   def R28  : AquilaGPRReg<28, "r28">,  DwarfRegNum<[28]>;
+   def R29  : AquilaGPRReg<29, "r29">,  DwarfRegNum<[29]>;
+   def R30  : AquilaGPRReg<30, "r30">,  DwarfRegNum<[30]>;
+   def R31  : AquilaGPRReg<31, "r31">,  DwarfRegNum<[31]>;
+ }
+ 
+ //===----------------------------------------------------------------------===//
+ //@Register Classes
+ //===----------------------------------------------------------------------===//
+ 
+ def CPURegs : RegisterClass<"Aquila", [i32], 32, (add
+   // Reserved (zero register)
+   R0,
+   // Reserved (assembly temporary)
+   R1, R2,
+   // Return Values
+   R3,
+   // Reserved (return address)
+   R4,
+   // Reserved (heap pointer)
+   R5,
+   // Reserved (closure pointer)
+   R6,
+   // Reserved (stack pointer)
+   R7,
+   // Reserved (arguments registers)
+   R8, R9, R10, R11, R12, R13,
+   // Not preserved across procedure calls
+   R14, R15, R16, R17, R18, R19, R20, R21, R22,
+   // Callee save
+   R23, R24, R25, R26, R27, R28, R29, R30, R31
+ )>;
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/AquilaSchedule.td llvm-3.6.2.src/lib/Target/Aquila/AquilaSchedule.td
*** llvm-3.6.2.src.org/lib/Target/Aquila/AquilaSchedule.td	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/AquilaSchedule.td	2016-02-18 16:34:42.000000000 -0500
***************
*** 0 ****
--- 1,37 ----
+ //===-- AquilaSchedule.td - Aquila Scheduling Definitions ------*- tablegen -*-===//
+ //
+ //                     The LLVM Compiler Infrastructure
+ //
+ // This file is distributed under the University of Illinois Open Source
+ // License. See LICENSE.TXT for details.
+ //
+ //===----------------------------------------------------------------------===//
+ 
+ //===----------------------------------------------------------------------===//
+ // Functional units across Aquila chips sets. Based on GCC/Aquila backend files.
+ //===----------------------------------------------------------------------===//
+ def ALU     : FuncUnit;
+ def IMULDIV : FuncUnit;
+ 
+ //===----------------------------------------------------------------------===//
+ // Instruction Itinerary classes used for Aquila
+ //===----------------------------------------------------------------------===//
+ def IIAlu              : InstrItinClass;
+ def IILoad             : InstrItinClass;
+ def IIStore            : InstrItinClass;
+ def IIBranch           : InstrItinClass;
+ def IIPseudo           : InstrItinClass;
+ 
+ //===----------------------------------------------------------------------===//
+ // Aquila Generic instruction itineraries.
+ //===----------------------------------------------------------------------===//
+ //@ http://llvm.org/docs/doxygen/html/structllvm_1_1InstrStage.html
+ def AquilaGenericItineraries : ProcessorItineraries<[ALU, IMULDIV], [], [
+ //@2
+   InstrItinData<IIAlu              , [InstrStage<1,  [ALU]>]>,
+   InstrItinData<IILoad             , [InstrStage<3,  [ALU]>]>,
+   InstrItinData<IIStore            , [InstrStage<3,  [ALU]>]>,
+   InstrItinData<IIBranch           , [InstrStage<1,  [ALU]>]>,
+   InstrItinData<IIPseudo           , [InstrStage<1,  [ALU]>]>
+ ]>;
+ 
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/AquilaTargetMachine.cpp llvm-3.6.2.src/lib/Target/Aquila/AquilaTargetMachine.cpp
*** llvm-3.6.2.src.org/lib/Target/Aquila/AquilaTargetMachine.cpp	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/AquilaTargetMachine.cpp	2016-02-18 09:57:44.000000000 -0500
***************
*** 0 ****
--- 1,26 ----
+ //===-- AquilaTargetMachine.cpp - Define TargetMachine for Aquila -------------===//
+ //
+ //                     The LLVM Compiler Infrastructure
+ //
+ // This file is distributed under the University of Illinois Open Source
+ // License. See LICENSE.TXT for details.
+ //
+ //===----------------------------------------------------------------------===//
+ //
+ // Implements the info about Aquila target spec.
+ //
+ //===----------------------------------------------------------------------===//
+ 
+ #include "AquilaTargetMachine.h"
+ #include "Aquila.h"
+ 
+ #include "llvm/IR/LegacyPassManager.h"
+ #include "llvm/CodeGen/Passes.h"
+ #include "llvm/Support/TargetRegistry.h"
+ using namespace llvm;
+ 
+ #define DEBUG_TYPE "aquila"
+ 
+ extern "C" void LLVMInitializeAquilaTarget() {
+ }
+ 
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/AquilaTargetMachine.h llvm-3.6.2.src/lib/Target/Aquila/AquilaTargetMachine.h
*** llvm-3.6.2.src.org/lib/Target/Aquila/AquilaTargetMachine.h	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/AquilaTargetMachine.h	2016-02-18 09:57:44.000000000 -0500
***************
*** 0 ****
--- 1,19 ----
+ //===-- AquilaTargetMachine.h - Define TargetMachine for Aquila -----*- C++ -*-===//
+ //
+ //                     The LLVM Compiler Infrastructure
+ //
+ // This file is distributed under the University of Illinois Open Source
+ // License. See LICENSE.TXT for details.
+ //
+ //===----------------------------------------------------------------------===//
+ //
+ // This file declares the Aquila specific subclass of TargetMachine.
+ //
+ //===----------------------------------------------------------------------===//
+ 
+ #ifndef LLVM_LIB_TARGET_AQUILA_AQUILATARGETMACHINE_H
+ #define LLVM_LIB_TARGET_AQUILA_AQUILATARGETMACHINE_H
+ 
+ 
+ #endif
+ 
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/CMakeLists.txt llvm-3.6.2.src/lib/Target/Aquila/CMakeLists.txt
*** llvm-3.6.2.src.org/lib/Target/Aquila/CMakeLists.txt	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/CMakeLists.txt	2016-02-18 13:22:43.000000000 -0500
***************
*** 0 ****
--- 1,25 ----
+ 
+ set(LLVM_TARGET_DEFINITIONS AquilaOther.td)
+ 
+ # Generate AquilaGenRegisterInfo.inc and AquilaGenInstrInfo.inc which included by 
+ #  your hand code C++ files. 
+ # AquilaGenRegisterInfo.inc came from AquilaRegisterInfo.td, AquilaGenInstrInfo.inc 
+ #  came from AquilaInstrInfo.td.
+ tablegen(LLVM AquilaGenRegisterInfo.inc -gen-register-info)
+ tablegen(LLVM AquilaGenInstrInfo.inc -gen-instr-info)
+ tablegen(LLVM AquilaGenCallingConv.inc -gen-callingconv)
+ tablegen(LLVM AquilaGenSubtargetInfo.inc -gen-subtarget)
+ tablegen(LLVM AquilaGenMCPseudoLowering.inc -gen-pseudo-lowering)
+ 
+ # AquilaCommonTableGen must be defined
+ add_public_tablegen_target(AquilaCommonTableGen)
+ 
+ # AquilaCodeGen should match with LLVMBuild.txt AquilaCodeGen
+ add_llvm_target(AquilaCodeGen
+   AquilaTargetMachine.cpp
+   )
+ 
+ # Should match with "subdirectories =  MCTargetDesc TargetInfo" in LLVMBuild.txt
+ add_subdirectory(TargetInfo)
+ add_subdirectory(MCTargetDesc)
+ 
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/LLVMBuild.txt llvm-3.6.2.src/lib/Target/Aquila/LLVMBuild.txt
*** llvm-3.6.2.src.org/lib/Target/Aquila/LLVMBuild.txt	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/LLVMBuild.txt	2016-02-18 09:57:44.000000000 -0500
***************
*** 0 ****
--- 1,60 ----
+ ;===- ./lib/Target/Aquila/LLVMBuild.txt --------------------------*- Conf -*--===;
+ ;
+ ;                     The LLVM Compiler Infrastructure
+ ;
+ ; This file is distributed under the University of Illinois Open Source
+ ; License. See LICENSE.TXT for details.
+ ;
+ ;===------------------------------------------------------------------------===;
+ ;
+ ; This is an LLVMBuild description file for the components in this subdirectory.
+ ;
+ ; For more information on the LLVMBuild system, please see:
+ ;
+ ;   http://llvm.org/docs/LLVMBuild.html
+ ;
+ ;===------------------------------------------------------------------------===;
+ 
+ # Following comments extracted from http://llvm.org/docs/LLVMBuild.html
+ 
+ [common]
+ subdirectories = 
+   MCTargetDesc TargetInfo
+ 
+ [component_0]
+ # TargetGroup components are an extension of LibraryGroups, specifically for 
+ #  defining LLVM targets (which are handled specially in a few places).
+ type = TargetGroup
+ # The name of the component should always be the name of the target. (should 
+ #  match "def Aquila : Target" in Aquila.td)
+ name = Aquila
+ # Aquila component is located in directory Target/
+ parent = Target
+ # Whether this target defines an assembly parser, assembly printer, disassembler
+ #  , and supports JIT compilation. They are optional.
+ 
+ [component_1]
+ # component_1 is a Library type and name is AquilaCodeGen. After build it will 
+ #  in lib/libLLVMAquilaCodeGen.a of your build command directory.
+ type = Library
+ name = AquilaCodeGen
+ # AquilaCodeGen component(Library) is located in directory Aquila/
+ parent = Aquila
+ # If given, a list of the names of Library or LibraryGroup components which 
+ #  must also be linked in whenever this library is used. That is, the link time 
+ #  dependencies for this component. When tools are built, the build system will 
+ #  include the transitive closure of all required_libraries for the components 
+ #  the tool needs.
+ required_libraries =
+                      CodeGen Core MC 
+                      AquilaDesc 
+                      AquilaInfo 
+                      SelectionDAG 
+                      Support 
+                      Target
+ # end of required_libraries
+ 
+ # All LLVMBuild.txt in Target/Aquila and subdirectory use 'add_to_library_groups 
+ #  = Aquila'
+ add_to_library_groups = Aquila
+ 
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/MCTargetDesc/AquilaMCTargetDesc.cpp llvm-3.6.2.src/lib/Target/Aquila/MCTargetDesc/AquilaMCTargetDesc.cpp
*** llvm-3.6.2.src.org/lib/Target/Aquila/MCTargetDesc/AquilaMCTargetDesc.cpp	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/MCTargetDesc/AquilaMCTargetDesc.cpp	2016-02-18 09:57:44.000000000 -0500
***************
*** 0 ****
--- 1,44 ----
+ //===-- AquilaMCTargetDesc.cpp - Aquila Target Descriptions -------------------===//
+ //
+ //                     The LLVM Compiler Infrastructure
+ //
+ // This file is distributed under the University of Illinois Open Source
+ // License. See LICENSE.TXT for details.
+ //
+ //===----------------------------------------------------------------------===//
+ //
+ // This file provides Aquila specific target descriptions.
+ //
+ //===----------------------------------------------------------------------===//
+ 
+ #include "AquilaMCTargetDesc.h"
+ #include "llvm/MC/MachineLocation.h"
+ #include "llvm/MC/MCCodeGenInfo.h"
+ #include "llvm/MC/MCELFStreamer.h"
+ #include "llvm/MC/MCInstPrinter.h"
+ #include "llvm/MC/MCInstrInfo.h"
+ #include "llvm/MC/MCRegisterInfo.h"
+ #include "llvm/MC/MCSubtargetInfo.h"
+ #include "llvm/MC/MCSymbol.h"
+ #include "llvm/Support/CommandLine.h"
+ #include "llvm/Support/ErrorHandling.h"
+ #include "llvm/Support/FormattedStream.h"
+ #include "llvm/Support/TargetRegistry.h"
+ 
+ using namespace llvm;
+ 
+ #define GET_INSTRINFO_MC_DESC
+ #include "AquilaGenInstrInfo.inc"
+ 
+ #define GET_SUBTARGETINFO_MC_DESC
+ #include "AquilaGenSubtargetInfo.inc"
+ 
+ #define GET_REGINFO_MC_DESC
+ #include "AquilaGenRegisterInfo.inc"
+ 
+ //@2 {
+ extern "C" void LLVMInitializeAquilaTargetMC() {
+ 
+ }
+ //@2 }
+ 
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/MCTargetDesc/AquilaMCTargetDesc.h llvm-3.6.2.src/lib/Target/Aquila/MCTargetDesc/AquilaMCTargetDesc.h
*** llvm-3.6.2.src.org/lib/Target/Aquila/MCTargetDesc/AquilaMCTargetDesc.h	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/MCTargetDesc/AquilaMCTargetDesc.h	2016-02-18 09:57:44.000000000 -0500
***************
*** 0 ****
--- 1,41 ----
+ //===-- AquilaMCTargetDesc.h - Aquila Target Descriptions -----------*- C++ -*-===//
+ //
+ //                     The LLVM Compiler Infrastructure
+ //
+ // This file is distributed under the University of Illinois Open Source
+ // License. See LICENSE.TXT for details.
+ //
+ //===----------------------------------------------------------------------===//
+ //
+ // This file provides Aquila specific target descriptions.
+ //
+ //===----------------------------------------------------------------------===//
+ 
+ #ifndef LLVM_LIB_TARGET_AQUILA_MCTARGETDESC_AQUILAMCTARGETDESC_H
+ #define LLVM_LIB_TARGET_AQUILA_MCTARGETDESC_AQUILAMCTARGETDESC_H
+ 
+ #include "llvm/Support/DataTypes.h"
+ 
+ namespace llvm {
+ class Target;
+ class Triple;
+ 
+ extern Target TheAquilaTarget;
+ extern Target TheAquilaelTarget;
+ 
+ } // End llvm namespace
+ 
+ // Defines symbolic names for Aquila registers.  This defines a mapping from
+ // register name to register number.
+ #define GET_REGINFO_ENUM
+ #include "AquilaGenRegisterInfo.inc"
+ 
+ // Defines symbolic names for the Aquila instructions.
+ #define GET_INSTRINFO_ENUM
+ #include "AquilaGenInstrInfo.inc"
+ 
+ #define GET_SUBTARGETINFO_ENUM
+ #include "AquilaGenSubtargetInfo.inc"
+ 
+ #endif
+ 
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/MCTargetDesc/CMakeLists.txt llvm-3.6.2.src/lib/Target/Aquila/MCTargetDesc/CMakeLists.txt
*** llvm-3.6.2.src.org/lib/Target/Aquila/MCTargetDesc/CMakeLists.txt	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/MCTargetDesc/CMakeLists.txt	2016-02-18 09:57:44.000000000 -0500
***************
*** 0 ****
--- 1,5 ----
+ # MCTargetDesc/CMakeLists.txt
+ add_llvm_library(LLVMAquilaDesc
+   AquilaMCTargetDesc.cpp
+   )
+ 
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/MCTargetDesc/LLVMBuild.txt llvm-3.6.2.src/lib/Target/Aquila/MCTargetDesc/LLVMBuild.txt
*** llvm-3.6.2.src.org/lib/Target/Aquila/MCTargetDesc/LLVMBuild.txt	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/MCTargetDesc/LLVMBuild.txt	2016-02-18 09:57:44.000000000 -0500
***************
*** 0 ****
--- 1,26 ----
+ ;===- ./lib/Target/Aquila/MCTargetDesc/LLVMBuild.txt -------------*- Conf -*--===;
+ ;
+ ;                     The LLVM Compiler Infrastructure
+ ;
+ ; This file is distributed under the University of Illinois Open Source
+ ; License. See LICENSE.TXT for details.
+ ;
+ ;===------------------------------------------------------------------------===;
+ ;
+ ; This is an LLVMBuild description file for the components in this subdirectory.
+ ;
+ ; For more information on the LLVMBuild system, please see:
+ ;
+ ;   http://llvm.org/docs/LLVMBuild.html
+ ;
+ ;===------------------------------------------------------------------------===;
+ 
+ [component_0]
+ type = Library
+ name = AquilaDesc
+ parent = Aquila
+ required_libraries = MC 
+                      AquilaInfo 
+                      Support
+ add_to_library_groups = Aquila
+ 
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/TargetInfo/AquilaTargetInfo.cpp llvm-3.6.2.src/lib/Target/Aquila/TargetInfo/AquilaTargetInfo.cpp
*** llvm-3.6.2.src.org/lib/Target/Aquila/TargetInfo/AquilaTargetInfo.cpp	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/TargetInfo/AquilaTargetInfo.cpp	2016-02-18 12:52:03.000000000 -0500
***************
*** 0 ****
--- 1,21 ----
+ //===-- AquilaTargetInfo.cpp - Aquila Target Implementation -------------------===//
+ //
+ //                     The LLVM Compiler Infrastructure
+ //
+ // This file is distributed under the University of Illinois Open Source
+ // License. See LICENSE.TXT for details.
+ //
+ //===----------------------------------------------------------------------===//
+ 
+ #include "Aquila.h"
+ #include "llvm/IR/Module.h"
+ #include "llvm/Support/TargetRegistry.h"
+ using namespace llvm;
+ 
+ Target llvm::TheAquilaTarget, llvm::TheAquilaelTarget;
+ 
+ extern "C" void LLVMInitializeAquilaTargetInfo() {
+   RegisterTarget<Triple::aquila,
+         /*HasJIT=*/true> X(TheAquilaTarget, "aquila", "Aquila");
+ }
+ 
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/TargetInfo/CMakeLists.txt llvm-3.6.2.src/lib/Target/Aquila/TargetInfo/CMakeLists.txt
*** llvm-3.6.2.src.org/lib/Target/Aquila/TargetInfo/CMakeLists.txt	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/TargetInfo/CMakeLists.txt	2016-02-18 09:57:44.000000000 -0500
***************
*** 0 ****
--- 1,4 ----
+ add_llvm_library(LLVMAquilaInfo
+   AquilaTargetInfo.cpp
+   )
+ 
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/Aquila/TargetInfo/LLVMBuild.txt llvm-3.6.2.src/lib/Target/Aquila/TargetInfo/LLVMBuild.txt
*** llvm-3.6.2.src.org/lib/Target/Aquila/TargetInfo/LLVMBuild.txt	1969-12-31 19:00:00.000000000 -0500
--- llvm-3.6.2.src/lib/Target/Aquila/TargetInfo/LLVMBuild.txt	2016-02-18 09:57:44.000000000 -0500
***************
*** 0 ****
--- 1,24 ----
+ ;===- ./lib/Target/Aquila/TargetInfo/LLVMBuild.txt ---------------*- Conf -*--===;
+ ;
+ ;                     The LLVM Compiler Infrastructure
+ ;
+ ; This file is distributed under the University of Illinois Open Source
+ ; License. See LICENSE.TXT for details.
+ ;
+ ;===------------------------------------------------------------------------===;
+ ;
+ ; This is an LLVMBuild description file for the components in this subdirectory.
+ ;
+ ; For more information on the LLVMBuild system, please see:
+ ;
+ ;   http://llvm.org/docs/LLVMBuild.html
+ ;
+ ;===------------------------------------------------------------------------===;
+ 
+ [component_0]
+ type = Library
+ name = AquilaInfo
+ parent = Aquila
+ required_libraries = Support
+ add_to_library_groups = Aquila
+ 
diff -crN -x '*.pyc' llvm-3.6.2.src.org/lib/Target/LLVMBuild.txt llvm-3.6.2.src/lib/Target/LLVMBuild.txt
*** llvm-3.6.2.src.org/lib/Target/LLVMBuild.txt	2016-02-16 13:03:54.000000000 -0500
--- llvm-3.6.2.src/lib/Target/LLVMBuild.txt	2016-02-18 09:57:44.000000000 -0500
***************
*** 16,22 ****
  ;===------------------------------------------------------------------------===;
  
  [common]
! subdirectories = ARM AArch64 CppBackend Hexagon MSP430 NVPTX Mips PowerPC R600 Sparc SystemZ X86 XCore
  
  ; This is a special group whose required libraries are extended (by llvm-build)
  ; with the best execution engine (the native JIT, if available, or the
--- 16,22 ----
  ;===------------------------------------------------------------------------===;
  
  [common]
! subdirectories = ARM AArch64 CppBackend Hexagon MSP430 NVPTX Mips PowerPC R600 Sparc SystemZ X86 XCore Aquila
  
  ; This is a special group whose required libraries are extended (by llvm-build)
  ; with the best execution engine (the native JIT, if available, or the
